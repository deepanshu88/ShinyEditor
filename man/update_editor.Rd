% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ShinyEditorv1.R
\name{update_editor}
\alias{update_editor}
\title{Update HTML Editor on the client}
\usage{
update_editor(
  selector,
  text = "Sample Text",
  session = shiny::getDefaultReactiveDomain()
)
}
\arguments{
\item{selector}{\code{chr} The inputId used for \code{editor_ui}. This is namespaced and \verb{#} is prepended unless \code{asis = TRUE} in which case this is taken verbatim as the selector.}

\item{text}{Prepopulated Text to be shown in editor.}

\item{session}{A shiny session object.}
}
\value{
\code{NULL} Updates the text in the TinyMCE Editor
}
\description{
It allows to update HTML Editor in server side.
}
\examples{
library(shiny)
library(ShinyEditor)
# UI
ui <- fluidPage(

  # Setup
  use_editor(),
  titlePanel("HTML Generator"),

  # Text Input 1
  fluidRow(
    column(
      width = 6,
      editor_ui('textcontent'),
      br(),
      actionButton(
        "generatehtml",
        "Generate HTML Code",
        icon = icon("code"),
        class = "btn-primary"
      ), actionButton("updatedata", "Update Editor", icon = icon("edit"))),

    column(
      width = 6,
      uiOutput("rawText")
    )
  )

)

# Server
server <- function(input, output, session) {

  # Generate HTML
  content <- reactiveVal()
  editor_server("textcontent", inputId = "mytext")
  output$rawText <- renderUI({
    req(content())
    shiny::HTML(content())
  })
  observeEvent(input$generatehtml, {
    content(input$mytext)
  })

  observeEvent(input$updatedata, {
    update_editor(selector = "textcontent",
                  text = "<b>Sample Text</b>")

  })

}

# Run App
shinyApp(ui = ui, server = server)
}

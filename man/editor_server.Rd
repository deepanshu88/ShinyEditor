% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ShinyEditorv1.R
\name{editor_server}
\alias{editor_server}
\title{The server module for the TinyMCE editor}
\usage{
editor_server(
  selector,
  asis = FALSE,
  options = NULL,
  inputId,
  session = shiny::getDefaultReactiveDomain()
)
}
\arguments{
\item{selector}{\code{chr} The inputId used for \code{editor_ui}. This is namespaced and \verb{#} is prepended unless \code{asis = TRUE} in which case this is taken verbatim as the selector.}

\item{asis}{If \code{TRUE}, use the ID as-is even when inside a module
(instead of adding the namespace prefix to the ID).}

\item{options}{\code{list} of options to pass to the \code{TinyMCE.init} method. See the \href{https://www.tiny.cloud/docs/configure/}{TinyMCE Configuration options reference}}

\item{inputId}{\code{chr} The inputId to save the content of the TinyMCE editor to. This is namespaced unless \code{asis = TRUE} in which case this is taken verbatim as the inputId.}

\item{session}{A shiny session object.}
}
\description{
The server module for the TinyMCE editor
}
\examples{
library(shiny)
library(ShinyEditor)

# UI
ui <- fluidPage(# Setup
  use_editor(),
  titlePanel("HTML Generator"),

  # Text Input 1
  fluidRow(
    column(
      width = 6,
      editor_ui('textcontent'),
      br(),
      actionButton(
        "generatehtml",
        "Generate HTML Code",
        icon = icon("code"),
        class = "btn-primary"
      )
    ),

    column(width = 6,
           uiOutput("rawText"))
  ))

# Server
server <- function(input, output, session) {
  # Generate HTML
  content <- reactiveVal()
  editor_server("textcontent", inputId = "mytext")
  output$rawText <- renderUI({
    req(content())
    shiny::HTML(content())
  })
  observeEvent(input$generatehtml, {
    content(input$mytext)
  })

}

# Run App
shinyApp(ui = ui, server = server)
}
